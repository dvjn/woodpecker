// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "go.woodpecker-ci.org/woodpecker/v2/server/model"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GlobalVariableCreate provides a mock function with given fields: _a0
func (_m *Service) GlobalVariableCreate(_a0 *model.Variable) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalVariableCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Variable) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GlobalVariableDelete provides a mock function with given fields: _a0
func (_m *Service) GlobalVariableDelete(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalVariableDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GlobalVariableFind provides a mock function with given fields: _a0
func (_m *Service) GlobalVariableFind(_a0 string) (*model.Variable, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalVariableFind")
	}

	var r0 *model.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Variable, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Variable); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalVariableList provides a mock function with given fields: _a0
func (_m *Service) GlobalVariableList(_a0 *model.ListOptions) ([]*model.Variable, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalVariableList")
	}

	var r0 []*model.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ListOptions) ([]*model.Variable, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.ListOptions) []*model.Variable); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ListOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalVariableUpdate provides a mock function with given fields: _a0
func (_m *Service) GlobalVariableUpdate(_a0 *model.Variable) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalVariableUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Variable) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrgVariableCreate provides a mock function with given fields: _a0, _a1
func (_m *Service) OrgVariableCreate(_a0 int64, _a1 *model.Variable) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgVariableCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *model.Variable) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrgVariableDelete provides a mock function with given fields: _a0, _a1
func (_m *Service) OrgVariableDelete(_a0 int64, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgVariableDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrgVariableFind provides a mock function with given fields: _a0, _a1
func (_m *Service) OrgVariableFind(_a0 int64, _a1 string) (*model.Variable, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgVariableFind")
	}

	var r0 *model.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (*model.Variable, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, string) *model.Variable); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgVariableList provides a mock function with given fields: _a0, _a1
func (_m *Service) OrgVariableList(_a0 int64, _a1 *model.ListOptions) ([]*model.Variable, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgVariableList")
	}

	var r0 []*model.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *model.ListOptions) ([]*model.Variable, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, *model.ListOptions) []*model.Variable); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *model.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgVariableUpdate provides a mock function with given fields: _a0, _a1
func (_m *Service) OrgVariableUpdate(_a0 int64, _a1 *model.Variable) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgVariableUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *model.Variable) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VariableCreate provides a mock function with given fields: _a0, _a1
func (_m *Service) VariableCreate(_a0 *model.Repo, _a1 *model.Variable) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VariableCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Variable) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VariableDelete provides a mock function with given fields: _a0, _a1
func (_m *Service) VariableDelete(_a0 *model.Repo, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VariableDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repo, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VariableFind provides a mock function with given fields: _a0, _a1
func (_m *Service) VariableFind(_a0 *model.Repo, _a1 string) (*model.Variable, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VariableFind")
	}

	var r0 *model.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo, string) (*model.Variable, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo, string) *model.Variable); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariableList provides a mock function with given fields: _a0, _a1
func (_m *Service) VariableList(_a0 *model.Repo, _a1 *model.ListOptions) ([]*model.Variable, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VariableList")
	}

	var r0 []*model.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.ListOptions) ([]*model.Variable, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.ListOptions) []*model.Variable); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo, *model.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariableListPipeline provides a mock function with given fields: _a0, _a1
func (_m *Service) VariableListPipeline(_a0 *model.Repo, _a1 *model.Pipeline) ([]*model.Variable, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VariableListPipeline")
	}

	var r0 []*model.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Pipeline) ([]*model.Variable, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Pipeline) []*model.Variable); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo, *model.Pipeline) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariableUpdate provides a mock function with given fields: _a0, _a1
func (_m *Service) VariableUpdate(_a0 *model.Repo, _a1 *model.Variable) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VariableUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Variable) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
